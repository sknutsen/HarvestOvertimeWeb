package view

import "fmt"
import "github.com/sknutsen/harvestovertimelib/v2/models"
import "github.com/sknutsen/harvestovertimeweb/routes"
import "github.com/sknutsen/harvestovertimeweb/lib"

templ Index(signedIn bool, tasks []models.TaskDetails, settings models.Settings) {
    @MainLayout() {
        <div id="hours-div"></div>
        <form id="form" hx-post={routes.Hours} hx-swap="outerHTML" hx-target="#hours-div" hx-ext="multi-swap">
            if signedIn {
                <h2>Calculate overtime hours</h2>
                <label for="fromDate-input">From date</label>
                <input type="date" value={fmt.Sprint(settings.FromDate)} id="fromDate-input" name="fromDate" />
                <label for="toDate-input">To date</label>
                <input type="date" value={fmt.Sprint(settings.ToDate)} id="toDate-input" required name="toDate" />
                <label for="daysInWeek-input">Number of work days in week</label>
                <input type="number" value={fmt.Sprint(settings.DaysInWeek)} id="daysInWeek-input" required name="daysInWeek" />
                <label for="workDayHours-input">Number of hours in work day</label>
                <input type="number" step="0.5" value={fmt.Sprint(settings.WorkDayHours)} id="workDayHours-input" required name="workDayHours" />
                <label for="simulateFullWeekAtToDate-input">Simulate full weeks</label>
                <input type="checkbox" value={fmt.Sprint(settings.SimulateFullWeekAtToDate)} checked?={settings.SimulateFullWeekAtToDate} id="simulateFullWeekAtToDate-input" name="simulateFullWeekAtToDate" />
                @TimeOffTasks(tasks, settings.TimeOffTasks)
                <button type="submit">Get Hours</button>
            } else {
                <a href="/hours">Sign in</a>
            }
        </form>
    }
}

templ Hours(overtime float64) {
	<div id="hours-div">
		You have { fmt.Sprint(overtime) } hours of overtime
	</div>
}

templ TimeOffTasks(tasks []models.TaskDetails, timeOffTasks []models.Task) {
    <div id="time-off-tasks">
        <label>Select time off hours</label>
        <div id="time-off-tasks__list">
            for _, task := range tasks {
                <div class="time-off-task">
                    <label for={fmt.Sprintf("time-off-task__%d", task.Task.ID)}>{task.Task.Name}</label>
                    <input type="checkbox" value={fmt.Sprint(task.Task.ID)} checked?={lib.TaskIsSelected(task, timeOffTasks)} id={fmt.Sprintf("time-off-task__%d", task.Task.ID)} name="timeOffTasks" />
                </div>
            }
        </div>
    </div>
}
